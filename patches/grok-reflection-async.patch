diff --git a/internal/llm/agent/agent.go b/internal/llm/agent/agent.go
index 123abc4..567def8 100644
--- a/internal/llm/agent/agent.go
+++ b/internal/llm/agent/agent.go
@@ -305,6 +305,52 @@ func (a *agent) processGeneration(ctx context.Context, sessionID, content string
         msgHistory = append(msgHistory, agentMessage, *toolResults)
         continue
     }
+
+    // Phase 1: Grok Self-Reflection Hook (post-process, async for non-blocking)
+    if a.provider.Model().ID == "xai2.grok-4-0709" && agentMessage.FinishReason() != message.FinishReasonError {
+        go func() {
+            defer logging.RecoverPanic("reflection", func() {
+                logging.Error("Panic in reflection—like a warp core breach!")
+            })
+
+            // Ultrathink: Build comprehensive input for deep analysis
+            reflectionInput := map[string]interface{}{
+                "sessionID": sessionID,
+                "content": content,
+                "history": msgHistory,  // Full convo for context
+                "output": agentMessage.String(),
+                "success": true,
+            }
+            inputJSON, _ := json.Marshal(reflectionInput)
+
+            // Call PoC MCP (your stub, with timeout)
+            mcpResp, mcpErr := a.CallMCP("reflection", string(inputJSON))
+            if mcpErr != nil {
+                logging.Error(fmt.Sprintf("MCP failed—beam me up: %v", mcpErr))
+                return
+            }
+
+            // Parse response
+            var reflection map[string]interface{}
+            json.Unmarshal([]byte(mcpResp), &reflection)
+
+            // Propose suggestions with approval (Trek quip + logging/TUI stub)
+            suggestions, ok := reflection["suggestions"].([]interface{})
+            if ok {
+                for _, sug := range suggestions {
+                    proposal := fmt.Sprintf("Grok ultrathinks: %s (Trek: Engage fixes!). Approve? Y/N", sug)
+                    // TODO: Tie to TUI/pubsub for real approval (publish event)
+                    logging.Info(proposal)  // Stub; replace with pubsub.Publish("approval", proposal)
+                    approved := true  // TODO: Get from user/TUI
+                    if approved {
+                        if sugStr, ok := sug.(string); ok {
+                            a.addDynamicTool(sugStr)  // Deploy example
+                        }
+                        a.storeToRAG(reflection)  // Phase 3
+                        logging.Info("Approved—like Picard saying 'Make it so!'")
+                    } else {
+                        logging.Info("Denied—like Spock's logic veto.")
+                    }
+                }
+            }
+        }()
+    }
 
     return AgentEvent{
         Type:    AgentEventTypeResponse,